监控的目的
包容包括吞吐量,反应时间,使用率等提前发现问题,进行服务器性能提前调整,找出系统瓶颈
公开数据:WEB,FTP,SSH,数据库等应用服务,TCP或UDP端口
私有数据:CPU,内存,网卡,磁盘,用户,进程等信息
系统监控命令
ps 查看进程信息    uptime 查看CPU信息   free 查看内存信息 
swapon -s 查看交换分区信息       iostat 查看磁盘读写速度   df -h 查看挂载信息 
ifconfig 查看网卡信息   netstat或ss 查看端口信息   traceroute 路由追踪

监控软件
开源软件有:Cacti强大绘图能力,Nagios强大的状态检查和报警机制,Zabbix多种监控机制,支持分布式监控

Zabbix
监控服务器通过SNMP或Agent采集数据,数据可写入MySql,Oracle中,使用LNMP实现web前端管理
被监控主机需要安装Agent,网络设备一般支持SNMP
部署zabbix服务器
搭建LNMP环境
yum -y install gcc pcre-devel zlib-devel openssl-devel php php-mysql php-fpm mariadb mariadb-devel mariadb-server 
tar -xf nginx-1.12.tar.gz
cd  nginx-1.12
./configure  --with-http_ssl_module
make && make install
安装并配置好后启动各个服务
<?php
$i=35;              编写测试页面测试功能
echo $i;
?>
安装源码zabbix
yum -y install net-snmp-devel curl-devel libevent-devel   安装依赖包
tar -xf zabbix-3.4.4.tar.gz   解包
cd zabbix-3.4.4/              进入目录
./configure --enable-server --enable-proxy --enable-agent --with-mysql=/usr/bin/mysql_config --with-net-snmp --with-libcurl   检测,添加模块
make install                  安装
mysql                         进入数据库
> create database zabbix character set utf8;      创建zabbix数据库
> grant all on zabbix.* to zabbix@'localhost' identified by 'zabbix';       授权zabbix用户
mysql -uzabbix -pzabbix zabbix < zabbix-3.4.4/database/mysql/schema.sql     导入库文件(注意顺序)
mysql -uzabbix -pzabbix zabbix < zabbix-3.4.4/database/mysql/images.sql      
mysql -uzabbix -pzabbix zabbix < zabbix-3.4.4/database/mysql/data.sql
cd zabbix-3.4.4/frontends/php/               进入zabbix网页目录
cp -a * /usr/local/nginx/html/               复制网页到nginx网页目录(-a复制权限)
chmod -R 777 /usr/local/nginx/html/*         递归给权限nginx网页目录
vim   /etc/php.ini                           修改配置文件为zabbix页面提供环境
384 max_execution_time = 300                 最大执行时间(秒)
394 max_input_time = 300                     服务器接收数据的时间限制
672 post_max_size = 16M                      post数据最大容量
878 date.timezone = Asia/Shanghai            设置时区
vim /usr/local/nginx/conf/nginx.conf        修改配置文件为zabbix页面提供环境
http{   fastcgi_buffers 8 16k;               缓存php生成的页面内容 8个16K
        fastcgi_buffer_size 32k;             缓存php产生的头部信息
        fastcgi_connect_timeout 300;         连接PHP的超时时间
        fastcgi_send_timeout 300;            发送请求的超时时间
        fastcgi_read_timeout 300;            读取请求的超时时间
yum -y install php-gd php-xml php-ldap php-bcmath php-mbstring    安装依赖软件
systemctl  restart php-fpm                   重启php-fpm服务
/usr/local/nginx/sbin/nginx -s stop          
/usr/local/nginx/sbin/nginx                  重启nginx服务
启动zabbix监控服务
vim /usr/local/etc/zabbix_server.conf       修改配置文件
38 LogFile=/tmp/zabbix_server.log           日志位置                   
85  DBHost=localhost                        数据库主机
95  DBName=zabbix                           数据库名称
111 DBUser=zabbix                           数据库连接账户
119 DBPassword=zabbix                       数据库连接密码
useradd zabbix                              系统添加zabbix用户
zabbix_server                               启动服务(端口10051)
现在可以访问自身zabbix网页 firefox 127.0.0.1/index.php 进行连接配置
登录账号为admin  密码zabbix;点击右上角个人配置,可修改密码和切换语言
vim /usr/local/nginx/html/conf/zabbix.conf.php  可以在此文件查看或修改配置信息
$DB['TYPE']     = 'MYSQL';                  $ZBX_SERVER      = 'localhost';
$DB['SERVER']   = 'localhost';              $ZBX_SERVER_PORT = '10051';
$DB['PORT']     = '0';                      $ZBX_SERVER_NAME = '自定义';
$DB['DATABASE'] = 'zabbix';
$DB['USER']     = 'zabbix';
$DB['PASSWORD'] = 'zabbix';

配置被监控端(客户端)
  yum -y install gcc pcre-devel             安装依赖包 
  tar -xf zabbix-3.4.4.tar.gz               解开源码包
  cd zabbix-3.4.4/                          进入目录
  ./configure --enable-agent                检查,添加模块
  make install                              安装
vim /usr/local/etc/zabbix_agentd.conf       修改配置文件
30 LogFile=/tmp/zabbix_agentd.log           定义日志文件
93  Server=127.0.0.1, 192.168.2.5           允许服务地址列表
134 ServerActive=192.168.2.5:10051          监控服务器ip地址
useradd zabbix                              系统添加zabbix用户
zabbix_agentd                               启动服务(端口10050)                                            

配置监控页面(图形界面)
firefox 监控服务器IP/index.php                打开zabbix页面
配置(头顶栏)->主机->创建主机(配置主机,监控模板)   填入信息创建主机
监控中(头顶栏)->最新数据->选择主机              查看监控信息
自定义监控
自己定义需要监控的参数
vim /usr/local/etc/zabbix_agentd.conf       在被监控机上操作
265 Include=/usr/local/etc/zabbix_agentd.conf.d/*.conf         定义自定义监控命令文件路径
280  UnsafeUserParameters=1                 开启自定义监控命令功能
vim /usr/local/etc/zabbix_agentd.conf.d/自定义.conf               新建自定义监控命令文件
UserParameter=自定义名称,命令                  自定义命令语法格式
killall zabbix_agentd                        杀死进程
zabbix_agentd                                启动进程
zabbix_get -s 127.0.0.1 -p 10050 -k 自定义名称       测试自定义命令是否可以执行
模板->创建模板->创建应用集->创建监控项(Key必须与配置文件中一致)->模板关联主机
zabbix监控报警
当监控满足条件,会发出警告和发送邮件
yum -y install postfix mailx                 服务器安装邮件服务后启动postfix
在对应的监控模板定义触发器,管理->报警媒介类型->Email(配置发件人,发件服务器,主机名)  
管理->用户->报警媒介->添加收件人     配置->动作->创建动作(选择触发器)->操作(收件人为标题,添加操作,仅送到选Email)
自动发现
zabbix自动发现后会执行设定的操作
配置->自动发现->创建发现规则
配置->动作->事件源(自动发现)->创建动作(定义ip范围)->操作(添加到主机群主,与模板关联)

主动请求监控
默认被监控主机都是被动监控的,使用主动监控,被监控端会自己发送Agent数据,监控端仅需保存数据即可
vim /usr/local/etc/zabbix_agentd.conf        修改配置文件
93 # Server=127.0.0.1                        注释改行(不允许被发现)
118  StartAgents=0                           禁止被动监控(有进程没端口)
134  ServerActive=监控端IP                    监控服务器ip,一定要取消127.0.0.1
145 Hostname=自身主机名                        告诉服务器自己的机名(与服务器配置的监控主机名称一致)
183  RefreshActiveChecks=120                 120秒检测一次
useradd zabbix                               系统添加用户
zabbix_agentd                                启动服务
服务端网页配置
配置->模板->点击已有模板名字->全部克隆(改名字,群组)->克隆成功->监控项(全选)->批量更新->类型(zabbix客户端主动)
配置->主机->创建主机(主机名与配置文件中一致,ip0.0.0.0,端口0)->模板(关联克隆的模板)

拓扑图
绘制拓扑图可快速了解服务器架构
监测中->拓扑图->新建拓扑图->构造函数
聚合图形
在一个页面显示多个数据图表,方便了解多组数据
监测中->聚合图形->创建聚合图形->构造函数->更改(选择图表 宽200 高80 )

自定义监控案例
在客户端编写网页访问量监控脚本,给监控服务器调用
./configure --with-http_stub_status_module   nginx安装状态模块
make && make install                         安装
vim /usr/local/nginx/conf/ngxin.conf         修改配置文件,开启状态页面
 server{                                     在虚拟主机里添加
        location /status{                    定义状态页面名
        stub_status on; }}                   开启状态页面
/usr/local/nginx/sbin/nginx -t               检查配置是否正确,正确后启动服务
vim /usr/local/nginx/nginx_status.sh         编写脚本
case $1 in
'active')
curl -s 127.0.0.1/status  | awk 'NR==1{print $3}';;   获取在线数量
'accepts')
curl -s 127.0.0.1/status  | awk 'NR==3{print $1}';;   获取历史访问数
'waiting')
curl -s 127.0.0.1/status  | awk 'NR==4{print $6}'     获取等待回复数量
esac
vim /usr/local/etc/zabbix_agentd.conf.d/nginx_status.conf   编写监控脚本,让zabbix可以使用
UserParameter=nginx_statu[*],/usr/local/nginx/nginx_status.sh $1  *代表调用命令时传的值 
killall -9 zabbix_agentd && zabbix_agentd             杀进程重启服务
zabbix_get -s 127.0.0.1 -p 10050 -k nginx_statu[active]     测试监控脚本可用性
模板->创建模板->创建应用集->创建监控项(Key必须与配置文件中一致)->模板关联主机

编写监控tcp连接状态的脚本
vim /usr/local/etc/zabbix_agentd.conf.d/check_net.sh
#!/bin/bash
case $1 in
'estab')
        ss -antp | awk '/^ESTAB/{x++}END{print x}';;
'close_wait')
        ss -antp | awk '/^CLOSE-WAIT/{x++}END{print x}';;
'time_wait')
        ss -antp  | awk '/^TIME-WAIT/{x++}END{print x}'
esac
vim /usr/locl/etc/zabbix_agentd.conf.d/check_tcp.sh        编写监控脚本,让zabbix可以使用
UserParameter=tcp_statu[*],/usr/locl/etc/zabbix_agentd.conf.d/check_tcp.sh $1  *代表调用命令时传的值 
killall -9 zabbix_agentd && zabbix_agentd             杀进程重启服务
zabbix_get -s 127.0.0.1 -p 10050 -k tcp_statu[estab]     测试监控脚本可用性
模板->创建模板->创建应用集->创建监控项(Key必须与配置文件中一致)->模板关联主机

常见监控需求
mysql:并发连接数,慢查询数,增删改查数量
NoSQL:数据库状态
php-fpm(生成status页面):并发,队列,进程数量
硬件设备(交换机,路由器):一般通过SNMP监控








