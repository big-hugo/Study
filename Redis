NoSQL=Not Only SQL
泛指非关系型数据库,不需预先定义数据存储结构,每条记录可以有不同的数据类型和字段个数 mencached redis mongodb couchdb neo4j flockdb

Redis
远程字典服务器,高性能分布式内存数据库,定期把内存数据存储到硬盘,支持主从模式,支持多种数据类型,默认端口6379
源码包安装
rpm -q gcc || yum -y install gcc      检查gcc是否安装
tar -xf redis-4.0.8.tar.gz            解开源码包
cd redis-4.0.8                        进入解压后目录
make && make install                  编译安装
./utils/install_server.sh             执行初始化脚本,启动redis(一路回车)
/etc/init.d/redis_6379 stop           停止服务(start开启)
redis-cli                             连接本机redis服务
/var/lib/redis/6379/                  库文件存放目录

redis基本操作(key-values存储结构)
keys *              查看所有变量名(*匹配任意多个字符  ?匹配单个字符)
set  变量  值        定义变量(字符类型)        mset  变量  值 ...   定义多个变量
get  变量            获取变量值               mget   变量 ...      获取多个变量值
del  变量            删除变量                select  0-15        切换库(默认0-15库)
exists   变量        查看变量是否存在          type   变量          查看变量类型
ttl  变量            查看key生存时间(-1永久,-2过期)
expire   变量  秒数   设置变量有效时间(单位秒)
move 变量 库号        移动变量到指定库
flushdb              删除所在库所有变量        flushall            删除所有key 
save                 保存变量到硬盘           shutdown            停止服务
exit                退出

配置文件解析
vim /etc/redis/6379.conf
配置分类
NETWORK网络  GENERAL常规  SNAPSHOTTING快照  REPLICATION复制  SECURITY安全  CLIENTS客户端  MEMORY MANAGEMENT内存管理
数据单位
 1k => 1000 bytes
 1kb => 1024 bytes
 1m => 1000000 bytes
 1mb => 1024*1024 bytes
 1g => 1000000000 bytes
 1gb => 1024*1024*1024 bytes
 units are case insensitive so 1GB 1Gb 1gB are all the same.
常用配置
port 6379             端口
bind 127.0.0.1        ip地址
daemonize yes         守护进程方式运行
datebases 16          数据库个数
logfile  /var/log/redis_6379.log      定义日志文件
maxclients  10000     并发连接数量
dir  /var/lib/redis/6379              数据库目录
内存清除策略
noeviction        不删除,写满时报错
volatile-lru      清除最近少用的(针对设置了TTL的key)
allkeys-lru       清除最近少用的(针对所有key)
allkeys-lfu       从所有key中清除使用频率最少的key
volatile-lfu      从所有配置了过期时间的key中清除使用频率最少的key
volatile-random   在设置了TTL的key里随机移除
allkeys-random    所有key中随机移除
volatile-ttl (minor TTL) 移除最近过期的key
优化设置
maxmemory         最大内存
maxmemory-policy  定义使用策略
maxmemory-samples 选取key模板个数(针对lru和ttl策略)

设置连接密码和端口
vim /etc/redis/6379.conf      修改配置文件
requirepass  123456           密码改为123456
bind  192.168.4.50            修改IP地址
port  6350                    改变端口
/etc/init.d/redis_6379   restart    重启服务(更改端口后,此脚本操作不可用,杀死进程或shutdown停止服务)
redis-cli -h 192.168.4.50 -p 6350 -a 123456     密码连接数据库(或进入库后 auth 123456)
redis-cli -h 192.168.4.50 -p 6350 -a 123456  shutdown  停止服务
vim  +43 /etc/init.d/redis_6379    修改启动脚本,可以提供端口使用
$CLIEXEC -h 192.168.4.50 -p 6350 -a 123456 $REDISPORT shutdown     添加端口,IP,密码信息
/etc/init.d/redis_6379   restart    修改后的启动脚本可以使用

部署LNMP+redis
LNMP的搭建请查看Nginx的内容
配置PHP支持redis
yum -y install php php-devel automake autoconf    安装依赖包
tar -xf php-redis-2.2.4.tar.gz   解包
cd phpredis-2.2.4/               进入目录
phpize                           生成配置文件php-config及configure命令
./configure --with-php-config=/usr/bin/php-config   检查环境,添加模块
make && make install             编译安装
vim +728 /etc/php.ini            修改配置文件
728:extension_dir = "/usr/lib64/php/modules/"   模块目录
730:extension = "redis.so"       模块名
systemctl restart php-fpm        重启服务
php -m | grep -i redis           检查是否支持模块
vim /usr/local/nginx/html/test.php   编写测试脚本
<?php
$redis = new redis();           新建对象
$redis->connect('数据库IP',端口);
$redis->auth("密码");            没密码可以不写这一行
$redis->set('存储变量名','值');   存储key和value
echo $redis->get('变量名');      输出获取的值
?>
curl  127.0.0.1/test.php       访问测试能不能获取值

redis集群的高可用功能
把主服务器的redis服务停止,对应的从服务器会自动升级成主服务器。
宕机的主服务器redis服务运行后,自动作当前主库的从库并自动同步宕机期间产生的新数据。

配置redis集群
默认选三台机器作主服务器
6台redis服务器环境搭建
vim /etc/redis/6379.conf       修改配置文件
70    bind   IP                改为本机IP
93    port   自定义端口          修改端口(便于区分)
815   cluster-enabled yes      开启集群功能
823   cluster-config-file nodes-6379.conf     定义集群配置文件
829   cluster-node-timeout 5000               定义连接超时时间毫秒
/etc/init.d/redis_6379    stop  停止服务
rm -rf /var/lib/redis/6379/*    删除原有数据,必要操作
vim  +43  /etc/init.d/redis_6379              修改启动脚本
$CLIEXEC -h 本机IP  -p 自定义端口  shutdown
/etc/init.d/redis_6379    start               重启服务
部署ruby脚本运行环境(在其中一台机上做)
yum -y install ruby             安装ruby
rpm -qf /usr/bin/gem            安装gem
gem install  redis-3.2.1.gem    安装gem包
mkdir /root/bin                 创建命令检索目录
cd  redis-4.0.8/src/            进入安装目录
cp redis-trib.rb /root/bin/     复制管理集群脚本
chmod +x /root/bin/redis-trib.rb    给操作权限
redis-trib.rb help              查看帮助命令
redis-trib.rb create --replicas 1 192.168.4.51:6351 ip:端口 ...    创建redis集群(分配储存池)
*(如果启动不成功rm -rf /var/lib/redis/6379/nodes-6379.conf删除集群配置文件,重启redis服务)
redis-trib.rb  info 192.168.4.52:6352         查看集群主从配置(集群中任意IP和端口)
redis-trib.rb  check 192.168.4.52:6352        查看集群详细主从信息(集群中任意IP和端口)
redis-cli -c -h 集群中任意IP -p 对应端口         客户端连接redis集群(变量名和crc16算法作hash计算再与%16384取余得到一个数) 
>cluser info                    查看自己在集群中的信息
redis-trib.rb  rebalance  集群控制IP:端口       重新平均分配哈希值

redis集群添加主机
redis-trib.rb  add-node 新增服务器IP:端口  集群控制服务器IP:端口   添加新的主服务器
redis-trib.rb  reshard 集群控制服务器IP:端口                     重新分配哈希槽
How many slots do you want to move (from 1 to 16384)? 4096     (总数/主库主机数 即 16384/4)
What is the receiving node ID?                                新增主机的集群ID(用info可查看)
Source node #1:all                                            所有重新分配
Do you want to proceed with the proposed reshard plan(yes/no)? yes   确认以上分配
redis-trib.rb add-node --slave [--master-id id值 ] 新增主机IP:端口 集群主机IP:端口  添加新的从服务器(不指定主库ID会添加到从库最少的主库)

redis集群移除主机
redis-trib.rb  del-node  集群控制服务器IP:端口  从服务器ID        移除从服务器
移除主服务器
redis-trib.rb reshard 集群控制IP:端口            重新分配哈希槽
How many slots do you want to move (from 1 to 16384)? 4096         把所拥有的哈希槽分配出来
What is the receiving node ID?                                     输入把哈希槽分配给哪台服务器的ID
Source node #1:                                                    输出被分配的服务器ID
Source node #2:done                                                输入done操作完成
Do you want to proceed with the proposed reshard plan(yes/no)? yes   确认以上分配
redis-trib.rb  del-node  集群控制服务器IP:端口  主服务器ID        移除主服务器

被移除的主机,再添加时会失败,需作以下操作,才可再加入
/etc/init.d/redis_6379 start               被移除的主机启动服务
redis-cli -h 自身IP -p 端口                 连接到自己的数据库
>cluster reset                             清除集群信息

redis-trib.rb脚本常用选项
create   创建集群      reshard    重新分片         del-node   删除主机       add-node  --slave   添加从主机
check    检查集群      rebalance  重新平均分片     add-node    添加主机






