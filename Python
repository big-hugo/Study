下载最新版python3
首先去python官网下载python3的源码包，网址：https://www.python.org/
进去之后点击导航栏的Downloads，也可以鼠标放到Downloads上弹出菜单选择Source code，表示源码包，这里选择最新版本3.6.4，
这里选择第一个下载即可，下载的就是源码包：Python-3.6.4.tar.gz，下载好之后上传到linux系统，准备安装


Linux下安装python3
yum install -y gcc gcc-c++ zlib-devel openssl-devel readline-devel libffi-devel sqlite-devel tcl-devel tk-devel
tar -xzf Python-3.6.4.tar.gz      解包
cd Python-3.6.4 && ls             进入目录查看，此时Python-3.6.4文件夹中没有makefile文件
./configure --prefix=/usr/local   configure是用来进行用户个性配置的工具，--prefix是说软件安装目录设置在哪里， =/usr/local就是你给出的安装目录
ls                                此时Python-3.6.4文件夹中生成了makefile文件
make && make install              编译和安装，整个过程大约5-10分钟，安装成功


下载并安装Pycharm社区版
网址：https://www.jetbrains.com/pycharm/download，这里选择下图红框下载即可，下载好之后上传到linux系统，准备安装
tar -xzf pycharm-community-2018.1.1.tar.gz          解压包 
cd pycharm-community-2018.1.1/bin                   进入目录
sh pycharm.sh &                                     通过运行下面的命令来运行PyCharm进入图形化安装界面
Pycharm打开后，如果你需要导入之前安装版本的设置的话，可以选择第一个选项，
如果没有的话，选择(Do not import settings)默认不导入设置，点击/同意，就可以进入pycharm进行配置
激活Pycharm：在弹出的激活窗口中，选择“License serveer”输入激活服务器地址“http://127.0.0.1:1017”，之后点击‘Activate’，完成pycharm激活

python编译器
python3  进入交互式编译器    exit  退出编译器   
Python3  文件               编译指定文件
chmod +x 文件.py            文件获得执行权限后可直接执行编译   

编写规范
Python缩进代表在同一个代码组，一般为4个空格
代码组以关键字开头，冒号：结束，该行之后的一行或多行代码为代码组
注释语句以#开头，可用\分为多行
分号；可将多个语句分在同一行上，但这些语句不能开启代码块（不常用）
input（）为输入函数，返回值一定是字符类型，print（）为输出函数
username = input('username: ')             #使用变量username接收用户输入的字符
print('Welcome', username)                 #输出欢迎信息，字符串和变量名之间用逗号
变量赋值
count = 0
tuoFengYuanZe = ‘name’
n += 1    等价于 n = n + 1
n *= 2    等价于 n = n * 2
运算符
+ — * / // % **
< <= > >= == !=
and  not  or

数据类型
int 整型    bool 布尔型   float 浮点型   complex 复数
Python默认十进制显示数字
0b开头2进制，0o开头为8进制，0x开头16进制
Python不区分字符和字符串
按存储模型分类
    标量类型：数值、字符串
    容器类型：列表、数组、字典
按更新模型分类
    可变类型：列表、字典
    不可变类型：数字、字符串、数组
按访问类型分类
    直接访问：数字
    顺序访问：字符串、列表、数组
    映射访问：字典

字符串截取
用[]和[:]能截取字符串，0是第一个索引，-1是最后一个索引
str = ‘Python’
str[0]值为P  str[-2]值为o  str[2:4]值为th  str[:4]值为Pyth
print str1+''+str2  用+号可以连接输出字符串   
print str*2         用*号可以重复输出字符串

定义列表
将列表当成数组，可保存任意数量类型的Python对象，列表也支持下标和截取操作，列表中的项目可以改变
list = [1,"tom",2,"big"]
使用in 或者 not in判断对象是否在列表中
“tom” in list      //ture
list.append（'three'）     用append()可在列表后追加一个对象
list.count(obj)            统计对象出现次数
list.extend(seq)            添加seq列表内容
list.index(obj)             返回对象下标
list.insert(index,obj)      在索引出插入对象
list.reverse()              原地翻转列表
list.sort()                 排序

定义数组
数组是静态的列表，一旦定义不可改变，只有一个元素时，需要末尾加上逗号，不然则认为是字符串类型
arry = (1,"tom",2,"big")

定义字典
字典是由key-value构成映射数据类型，通过key取值，不支持下标取值
user = {'name':'big','age':23}
user2 = dict（（['name':'big'],['age':23]））
user3 = {}.fromkeys(('name','age'),('big','23'))        以上是定义字典的三种方式
print 'key=%s,value=%s'%(key值，字典名[key值])           输出key和value
print('%(key值)s'%字典名)                                根据key输出value
字典名['key值'] = value值                                更新字典中的值，如果没有键，侧新增
del 字典名['key值']                                      删除key值和value
字典名.pop('key值')                                      返回key对应的value
字典名.get('key值',default='默认值')                     返回key对应的value,没有则返回默认值
字典名.setdefault(key,default=默认值)                    如果字典中不存在key，则创建并赋默认值
字典名.items()                                          返回一个包含字典中的键值对列表
字典名.keys（）                                          返回一个包含字典中所有键的列表
字典名.values（）                                        返回一个包含字典中所有值得列表
字典1.update（字典2）                                    将字典2的键值对添加到字典1
字典名.clear()                                          清空字典
字典名.len()                                            返回字典中value的数目
字典名.hash(obj)                                        判断对象是否能作为key
字典名.copy()                                            返回字典（深复制）的一个副本
'big' in user      //ture，用in查看元素是否在字典中，not in判断是否不在

创建集合
集合对象是一组无序排序的可哈希的值，它的成员通常被称为集合元素
集合分两种，可变集合set，不可变的集合forzenset
集合支持in和not in操作符检查成员，用len()检查集合大小，可用for迭代集合成员，不能切片，没有键
操作符： |并集  &交集  -差补
集合名.add()               添加成员
集合名.update()            批量添加成员
集合名.remove()            移除成员
集合1.issubset(集合2)       如果1是2的子集，返回true
集合1.issuperset(集合2)    如果2是1的超集，返回true
集合1.union(集合2)           返回1和2的并集
集合1.intersection（集合2）   返回1和2的交集
集合1.difference（集合2）     返回1的成员但不是2的成员

时间模块与方法
时间表示从1970年00:00:00开始以秒计算偏移量
模块 time
struct_time数组由9个元素组成：
索引    0        1        2         3        4       5       6                    7                         8
属性  tm_year  tm_mon   tm_mday   tm_hour  tm_min  tm_sec  tm_wday（0-6,0是周一） tm_yday（一年第几天0-366）  tm_isdst(是否dst时间，默认-1)
time.localtime([secs])        将一个时间戳转换为当前时区的struct_time，没给参数则以当前时间为准
time.gmtime([secs])           将一个时间戳转换为UTC时区的struct_time
time.time()                   返回当前时间的时间戳
time.mktime(t)                将一个struct_time转化为时间戳
time.sleep(secs)              线程推迟指定秒运行
time.asctime([t])             把时间形式表示为‘Sun Jun 20 xx:xx:xx 1993’，默认参数当前时间
time.cltime([secs])           把时间戳(按秒计算的浮点数)转化为‘Sun Jun 20 xx:xx:xx 1993’
time.strftime('%Y-%m-%d %x',[t])    把时间转化为指定的格式，默认当前时间
time.strptime(str[,format])         把格式字符串转化为struct_time
模块datetime
datetime.today()                    返回一个表示当前本地时间的datetime对象
datetime.now([时区])                返回一个表示当前本地时间的datetime对象，如果提供时区，则获取时区对本地的时间
datetime.strptime(str,format)       将格式字符串转为datetime对象
datetime.ctime(datetime对象)        返回时间格式字符串
datetime.strfime(format)            返回指定格式字符串


创建函数
def 函数名（参数=默认值）：
    函数体
    return 返回值

常用函数
import 模块名          使用函数要在开头导入该函数的模块包
当模块被直接_name == '_main_'，模块被另一文件导入时_name_ == '模块名'
computer = random.randint(0,2)             随机在0-2之间生成数
password = getpass.getpass('password: ')   无字符显示输入密码
computer = random.choice(['石头', '剪刀', '布'])    电脑在列表之间选择
for i in range(次数):                       造数工具range（）函数
f1 = open（文件名，'操作'）     打开文件并进行操作，r读，w写，a追加，r+读写，w+读写，a+读写，b二进制打开
f1.close()                     打开后要关闭文件IO
with open(文件名, '操作') as f1:             with代码块结束后自动关闭
data = f1.read(字节数)       读取字节到字符
f2.write(data)               写入字符
sys.argv[1], sys.argv[2]       表示执行文件的第一个变量和第二个变量
String模块，其中ascii_letters是生成所有字母，从a-z和A-Z，digits是生成所有数字0-9
type（obj）                  查看对象类型

流程语句
if 表达式：    只要表达式数字非0即为true，空字符串、空列表、空数组、空字典为false
    代码组
elif 表达式：
    代码组
else：
    代码组

表达式 if A else B    三目运算符，表达式为true，结果A；表达式结果为false，结果为B

while 表达式：        while循环语句，一般用于不确定次数循环
    代码组
    break            结束循环体
    continue         结束当前循环
else：               while可搭配else使用
    代码组
    
for 表达式：         for循环语句，一般用于确定次数的循环
    代码组
     break           结束循环体
    continue         结束当前循环
else：              for可搭配else使用
    代码组  
    
列表解析
核心是for循环，迭代列表的条目，返回的结果值是表达式产生的列表
expr for 变量名 in 列表



示例脚本：
输入输出
vim login.py                               编写以py结尾文件
#!/usr/bin/env python3                     指定编译器
import getpass               #调用该函数可以在命令行窗口里面无回显输入密码
username = input('username: ')
password = getpass.getpass('password: ')
if username == 'bob' and password == '123456':
    print('\033[32;1mLogin successful!\033[0m')        #绿色粗体显示
else:
    print('\033[31;1mLogin incorrect!\033[0m')         #红色粗体显示
                                          
