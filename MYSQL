数据库,存储描述信息的库

mysql初始化
grep password /var/log/mysqld.log    第一次启动时,mysql会自动为root账户配置随机密码,我们需要通过日志查看该密码
mysql  -u用户  -p'密码'        登录数据库
set global validate_password_policy=0;  //(0验证长度);(默认值1长度,数字.大写,小写,特殊符号);(2长度;数字、大写小写,特殊符号;字典文件)
set global validate_password_length=6;  //修改密码长度,默认值是8个字符
alter user user() identified by "123456";  //修改登陆密码
vim /etc/my.cnf             //修改配置添加如下内容,永久设置密码验证
validate_password_policy=0
validate_password_length=6


数据库基本管理
mysql [-h服务器IP或域名  -u用户名   -p密码  -P端口  数据库名称]    连接MySQL数据库的命令语法格式
mysqladmin -u用户 -p旧密码 password'新密码'              修改密码
show database;           查看数据库
use 库名;                 切换数据库
select database();       查看当前数据库
create databases 库名 character set utf8mb4;   创建数据库支持中文(数字、字母、下划线,不能纯数字;区分大小写;不能使用关键词或特殊符号)
drop  database  库名;     删除数据库
drop table  库名.表名;  删除表
create table 库名.表名(字段  char(20),...);    创建表 (not null非空,default '默认值')  
desc 库名.表名;           查看表结构
insert    into   库名.表名(字段,字段...)  values('','',...);    插入数据,不输入字段默认给全部字段赋值
update  库名.表名   set 字段=''  where 字段='';    更新数据
delete from 库名.表名  where  字段='';            删除数据
show index from 表名\G;          查看表索引(\G竖显示表格)
show create table 表名\G;        查看建表记录
system  系统命令;                可以在mysql中执行系统命令
set password=password('密码');   修改密码 
set password for 用户名@'登录地址' = password('密码'); 为用户修改密码
mysql -u用户 -p密码 -e 'sql命令'   在shell操作数据库
\c                             取消当前输入命令换行
show engines;            查看数据库存储引擎


root密码恢复
vim /etc/my.cnf     修改配置文件,添加下一行
skip-grant-tables   跳过授权表
systemctl restart mysqld 重启服务
update mysql.user set authentication_string=password('密码') where user='root' and host='登录地址';  修改密码
flush privileges;   刷新权限表


授权记录表
mysql.user     记录已有授权用户
mysql.db       记录已被授权的库
mysql.tables_priv     记录已被授权的表
mysql.columns_priv    记录已被授权的字段
grant授权(存在mysql.user表里)
grant 权限 on 库.表 to 用户@'客户端地址' identified by '密码' [with grant option];   授权用户[有授权权限]
权限列表: all所有权限   usage无权限  select update insert 个别权限   update('',''...)指定字段权限
登录地址:  %所有   192.168.4.% 网段    loaclhost本机
show grants;                 显示自身访问权限            
show grants for 用户名@'登录地址';       显示用户权限
drop user 用户名;             删除授权用户
revoke 权限 on 库.表 from 用户@'登录地址';   删除用户权限 


表结构(字段约束条件,控制字段赋值)
create table test(
id int(3) primary key ,                 定义主键
tel char(15) not null,                  定义非空
name char(6) default 'OYZH',            定义默认值
index(id,name))                          定义索引
engine=innodb;                         定义数据引擎类型为innodb

表结构编辑常用的语法格式如下：
ALTER TABLE <表名> [修改选项]   {after 列名 | first}  调整位置
修改选项的语法格式如下：
 ADD  <列名> <类型>
 CHANGE  <旧列名> <新列名> <新列类型>
 ALTER  <列名> { SET DEFAULT <默认值> | DROP DEFAULT }
 MODIFY  <列名> <类型>
 DROP  <列名>  , <列名>
 RENAME  <新表名> 


key键值:
普通索引  index         增加查询速度,降低删改查速度,占用物理空间记录排队信息,多用于需要查询的字段.算法类型(默认Btree,B+tree,hash)
index(id,name));                       定义索引
show index from 表名\G;          查看表索引(\G竖显示表格)
create index 索引标记 on 表名(字段);      创建索引
drop index 索引标记 on 表名;              删除索引
唯一索引  unique
全文索引  fulltext
主键     primary key   唯一性,非空,多字段为主键称为复合主键,必须一起创建
id int(3) primary key ,                 定义主键
primary key(id,name)                   定义复合主键
id int primary key auto_increment      定义自增长主键(删除所有也会记录上一个值,可以自插入id改变)
alter table 表名 add primary key(字段);   添加主键
alter table 表名 drop primary key;       删除主键
外键     foreign key    插入记录时,字段值在另一个表字段值范围内选择,类型要一致,被参考必须是索引的一种,表储存引擎必须是innodb
create table 表名( id int ,               定义字段
foreign key(字段) references 表名(字段)    定义外键
on update cascade on delete cascade      同步更新,同步删除
)engine=innodb;                          指定存储引擎
show create table 表名\G;                    查看外键
alter table 表名 drop  foreign key 外键名;    删除外键


数据库结构体系
连接池 sql接口 分析器 优化 查询缓存 命令工具 存储引擎 文件系统
数据库存储引擎
存储引擎不一样,数据存储方式不一样
ls /var/lib/mysql/表名.*      查看不同的存储引擎不同的存储方式
mysql 5.0~5.1  默认存储引擎 MyISAM   .frm表结构  .MYI索引  .MYD数据       支持表级锁,不支持事务和事务回滚,外键
mysql 5.5~5.6  默认存储引擎 InnoDB   .frm表结构  .ibd表空间(数据加索引)     支持行级锁定,支持事务和事务回滚,外键
show engines;          查看存储引擎 
create table a(...)engine=innodb;     建表时定义存储引擎 
alter table 库.表  engine=myisam;     修改表存储引擎
vim /etc/my.cnf        修改配置文件,定义默认存储引擎
default-storage-engine=myisam     定义默认存储引擎myisam
mysql锁机制
表级锁:对整张表加锁,锁时其他用户不能操作   myISAM  memory
行级锁:对被访问的行加锁    InnoDB
页级锁:会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般  BDB
锁类型
读锁S(共享锁):支持并发读,不能insert  
写锁x(互斥锁,排它锁):上锁期间其他线程不能读写表   
show status like '%table_lock%';    查看锁状态
lock table 表名 read;               上读锁
lock table 表名 write;              上写锁
unlock  tables;                    解锁表


数据库事务(ACID)
原子性:事务操作是一个整体,不可分隔,要么成功,要么失败
一致性:事务操作时,表中记录没有变化
隔离性:事务操作互相隔离不受影响
持久性:数据一旦提交,不可改变,永久改变表数据
ls /var/lib/mysql/ibdata1 ib_logfile0 ib_logfile1  事务日志文件
show variables like 'autocommit';    查看自动提交状态是否开启(默认开,仅针对当前连接)
set autocommit=off;                  关闭自动提交功能,仅针对当前连接
begin;              针对下面命令开启事务
rollback;           事务回滚
commit;             提交事务  


查询语法
select *　from 表 where is null / is not null      查询空值/非空值
where  and 或 &&            和
where  or  或 ||            或
where  not 或  !            取反
where (gid+uid)/2          ()提高优先级
where  值 in ('',''...) | not in ('',''...)        在范围内|不在范围内
where  between 10 and 20                          在10到20之间
where  值 like '表达式'    模糊查询     _单个字符  %任意个字符
where  值 regexp  '正则表达式式'       ^开头  $结尾  .任意单个字符  *前个字符匹配多次  |或  []匹配范围内
select distinct 值        去重查询
order by 字段 desc | asc  查询结果降序|升序排序
group by 字段             分组查询
having  条件              查询结果过滤
limit   3 ;               显示前三行
limit  0,3;               显示1到3行（0表示起始行，3表示总行数）

内置函数
select curtime();         获得当前系统时间
select curdate();         获得当前系统日期
select now(),sysdate();   获得系统当前日期和时间
database()                当前所在库
user()                    当前用户名和登录地址
avg(字段)                  计算平均值
sum(字段)                  0求和
min(字段)                  最小值
max(字段)                  最大值
count(字段)                个数


搜索路径
数据的导入导出要在这个目录中进行
show variables like 'secure_file_priv';        查看搜索路径(默认/var/lib/mysql-files/)
chown  mysql  自定义目录          修改自定义目录权限
vim /etc/my.cnf                 修改配置文件,添加下面一句
secure_file_priv='自定义目录'     定义搜索路径目录,重启服务后生效
数据导入:把系统文件的内容存储到表里
load data infile '搜索路径/文件' into table 表名 fields terminated by '分隔符'  lines terminated by '\n';   导入文件到表中作为数据
数据导出:把输出的内容导出到搜索路径
select命令 into outfile '/搜索路径/文件名' [fileds terminated by '分隔符' lines terminated by '换行符'];   导出查询结果

数据备份
物理备份方案
cp -r /var/lib/mysql  备份目录/mysql.bak    复制数据库文件
tar -zxf 备份目录/mysql.bak.gz  /var/lib/mysql/*   打包数据库文件
chown  -R  mysql:mysql   /var/lib/mysql          恢复数据需要给文件目录授权
逻辑备份方案
musqldump -u用户 -p密码  [--master-data] 库.表 > 目录/xx.sql         导出数据   -A全部库    -B  库1 库2  多个库

binlog日志
二进制日志,记录除查询之外所有SQL命令,可用于数据备份和恢复
vim /etc/my.cnf           修改配置文件,添加下面信息
log-bin[=目录名/文件名]     定义日志文件名和位置 
server_id=数字             定义主机id(1~255)
[binlog_format='格式']       定义日志格式      statement报表模式   row行模式   默认mixed混合模式
[max_binlog_size=数值m]      定义日志容量,默认1G
chown mysql 日志文件目录      授权给日志文件目录
重启服务生效
purge master logs to '日志文件名';    删除指定日志
reset master;                       删除所有日志
flush logs;                         刷新日志(新建一份日志)
show variables like 'binlog_format';     查看日志记录格式    statement报表模式   row行模式   mixed混合模式
show master status;                 查看日志信息
mysqlbinlog 日志文件名               查看日志文件内容，偏移量
mysqlbinlog [--start-position=偏移量 --stop-position=偏移量] 日志文件 | mysql -u用户名 -p密码   导入日志文件恢复数据     --start/stop-datetime='yyyy-mm-dd hh:mm:ss' 根据时间恢复



常用的SQL命令分类:
DDL数据定义语言(create,alter,drop)
DML数据操作语言(insert,update,delete)
DCL数据控制语言(grant,revoke)
DTL 数据事务语言(commit,rollback,savepoint)

数据类型
char(字符数)            固定长度,最大长度255字符,不够指定的字符数时自动在右边填补空格,超出指定字符数则无法写入。
varchar(字符数)        可变长度,根据实际数据大小分配存储空间,超出指定字符数则无法写入。
text/blob             字符数大于65535时使用。
               范围       范围(无符号)    使用 unsigned 标记无符号存储 标记无符号存储 create table test2(id int unsigned);
tinyint      -128~127      0~255       微小整数
smallint    -32768~32767   0~65535     小整数
mediumint    -2^23~2^23-1  0~2^24-1    中整数
int          -2^31~2^31-1  0~2^32-1    大整数
bigint       -2^63~2^63-1  0~2^64-1    极大整数
float        -2^31~2^31-1  0~2^32-1    单精度浮点数(M,D)其中 M 为总位数宽度,D 为小数位数,M 应大于 D
double       -2^63~2^63-1  0~2^64-1    双精度浮点数(M,D)
datetime日期时间类型   范围1000-01-01 00:00:00:000000~9999-12-31 23:59:59.999999  如果不给该类型的数据赋值,则默认为NULL
timestamp日期时间类型  范围1970-01-01 00:00:00:000000~2038-01-19 03:14:07.999999   如果不给该类型的数据赋值,则mysql自动为其分配当前的系统时间
date日期类型           范围0001-01-01~9999-12-31     时间格式:YYYYmmddhhmmss,或者"YYYY-mm-dd hh:mm:ss"
year年份类型           范围1901-2155
time时间类型           范围HH:MM:SS
enum(值1,值2,值3...)       枚举类单选项,值只能从里面的值选择一项   
set(值 1,值 2,值 3...)     枚举类多选项,值只能从里面的值选择多项


mysql图形管理软件
类型                 界面                 操作系统               ps
mysql               命令行                跨平台               官方bundle包自带
MYSQL-Workbench     图形                 跨平台               官方自带
MYSQL-Front         图形                Windows               开源,轻量级客户端软件
Navicat             图形                Windows              专业,功能强大,商业
phpMyAdmin          浏览器              跨平台                 开源,需要LANP平台,解压源码包到网页目录下即可在浏览器中访问


mysql备份工具
XtarBackup工具,备份过程不锁表
安装软件 libev     percona-xtrabackup
innobackupex --user root --password 123456 备份文件    备份全部    --database指定库    --no-timestamp不以时间命名
systemctl stop mysqld.service         关服务
rm -rf /var/lib/mysql/*               删原本库文件
innobackupex --apply-log  备份文件     准备恢复
innobackupex --copy-back  备份文件     拷贝数据到库文件目录
chown -R mysql:mysql /var/lib/mysql   授权
systemctl start  mysqld               起服务
增量备份
innobackupex --user root --password 123456 首备份目录  [--no-timestamp]   首备份(完全备份)
innobackupex --user root --password 123456 --incremental 增量备份目录 --incremental-basedir=上次备份目录  [--on-timestamp]     增量备份
增量恢复
systemctl stop mysqld            关闭服务
rm -rf /var/lib/mysql/*          删除数据库文件
innobackupex --apply-log --redo-only  首备份目录     准备恢复数据
innobackupex --apply-log --redo-only  首备份目录 --incremental-dir=增量备份目录   增量合并
innobackupex --copy-back  首备份目录    拷贝文件到库文件目录
chown -R mysql:mysql /var/lib/mysql   授权
systemctl start mysqld           启动服务
恢复单张表
delete from db3.user2;           误删除数据库
alter table db3.user2 discard tablespace;      删除表空间
innobackupex --apply-log  --export 备份目录     导出表信息
cp  备份目录/db3/user2.{cfg,exp,ibd}  /var/lib/mysql/db3/    拷贝表信息到数据库目录下    frm记录表结构  ibd存储数据
chown  -R  mysql:mysql  /var/lib/mysql         授权
alter table  db3.user2   import  tablespace;          导入表空间
rm -rf /var/lib/mysql/db3/user2.cfg  /var/lib/mysql/db3/user2.exp  删除数据库目录下的表信息文件
select * from db3.user2;          查看表记录

 



