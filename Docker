Docker容器
容器技术已经成为应用程序封装和交付的核心技术,由资源管理,进程隔离,selinux安全组成
容器与虚拟机类似,但容器不是虚拟机,启动一个容器可以像启动一个进程一样快速,更加简洁高效
容器运行的进程真机可查,虚拟机运行的进程真机不可查,容器使用共享公共库和程序
Docker是完整的一套容器管理系统
Docker容器的隔离性没有虚拟化强,共用linux内核,安全性先天缺陷
Docker中容器时基于镜像启动的,镜像时启动容器的核心,采用分层设计,用COW技术确保底层数据不丢失

安装软件
yum -y install docker             安装docker软件
systemctl restart docker          启动docker软件
systemctl enable docker           设置开机自启动

Docker hub镜像仓库
docker images                     查看本机docker镜像  (名称 标签 ID 创建时间 大小)
docker search   软件名             查看docker官网提供的镜像仓库
docker pull     下载路径           下载ocker官网提供的镜像
docker push     上传路径           上传镜像到docker官网
docker save 镜像名称:标签 -o 文件名.tar        导出(备份)镜像 ,生成的文件类型为tar包
docker load -i  文件名                       导入(还原)镜像,用导出tar包 
docker run -it  镜像名称:标签 /bin/bash       启动镜像生成一个容器(/bin/bash指容器里的路径,不添加则执行镜像里的默认命令,-itd后台运行)
docker history                    查看镜像制作历史
docker inspect                    查看镜像底层信息("Env":环境变量;"Cmd":系统默认命令)
docker rmi 镜像名称:标签            删除本地镜像(也可以根据ID)
docker tag 镜像名称:标签  新镜像名:新标签       新建修改名称标签后的镜像
docker ps  [-a] [-q]                        查看运行中容器(-a查看所有容器,-q查看指定容器)
docker stop/start/restart  容器ID           关闭/开启/重启容器
docker attach   容器ID            连接容器(exit退出会杀死父进程,容器会关闭;按ctrl+p+q退出)
docker exec -it 容器ID  /bin/bash           连接容器(exit退出容器不会关闭)
docker top      容器ID            查看容器进程列表
docker rm [-f]  容器ID            删除容器(-f强制删除)
docker commit   容器ID   镜像名称:标签        自定义镜像,把配置好的容器另存为镜像
docker build -t 镜像名:标签  Dockerfile所在目录    根据Dockerfile生成镜像

创建Dockerfile文件
mkdir bulid;cd bulid                       新建目录并进入目录操作
vim Dockerfile                             创建Dockerfile文件,下面为示例
例子1:
FROM docker.io/centos:latest               基于该镜像
RUN rm -f /etc/yum/repos.d/*.repo          执行该命令
ADD rr.repo /etc/yum.repos.d/local.repo    复制文件到镜像
RUN yum install -y net-tools vim iproute psmisc
例子2:
FROM test2:lastest                         基于该镜像
RUN yum -y install httpd bash-completion   执行安装软件命令
WORKDIR /var/www/html                      选择工作目录
RUN echo 'hello nsd1904' > index.html      执行命令修改主页面
EXPOSE 80                                  设置开放端口
CMD ["/usr/sbin/httpd", "-DFOREGROUND"]

Dockerfile语法格式：
– FROM:基础镜像
– MAINTAINER:镜像创建者信息(说明)
– EXPOSE:开放的端口
– ENV:设置环境变量
– ADD:复制文件到镜像
– RUN:制作镜像时执行的命令,可以有多个
– WORKDIR:定义容器默认工作目录
– CMD:容器启动时执行的命令,仅可以有一条CMD













redhat           debian
rpm               dpkg
yum              apt.get
