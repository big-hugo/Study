ansible
是2013年推出的一款IT自动化和运维开发软件,2015被redhat收购,基于Python研发
实现了批量操作系统配置,批量程序部署,批量运行命令等功能
优点:只需ssh和Python即可使用;无客户端;功能强大;Python二次开发容易
工作原理:主机集合对命令集合进行执行遍历(不并发),执行完后返回执行结果

被托管主机环境需求:开启ssh服务;Python2.5或以上版本(redhat默认自带);如果开启了selinux需要安装libselinux-python
托管机配置:
vim /etc/hosts                 事先准备主机能解析被托管机
yum -y install ansible         安装软件
ansible --version              查看版本
vim /etc/ansible/ansible.cfg    修改配置文件
14 inventory = /etc/ansible/hosts   定义被管理主机名集群文件路径
61 host_key_checking = False    ssh连接时不检查(不用输入yes)
vim /etc/ansible/hosts        手写变量定义文件
[web]                           自定义集合名
web1                            主机名
web2  ansible_ssh_port=7920     定义变量只对该主机生效
[db]                             自定义集合
db[1:2]                          表示db1 db2
[xxoo:children]                  子组定义,该集合下面可调用组名
web                              表示web集合
db                               表示db集合
[all:vars]                       定义变量集合,检测时调用此集合为默认配置
ansible_ssh_port=ssh连接端口       定义默认变量                 
ansible_ssh_pass=连接密码          定义默认变量
ansible_ssh_private=私钥文件路径    更多变量参数到官网查看
ansible_ssh_user=连接用户名
ansible all/主机集合 --list[-hosts]             列出所有/集合被管理主机
ssh-keygen -t ~/.ssh/rsa -b 2048 -N "" -f key  生产密钥对(这里私钥文件名用rsa是为了避免私钥文件名冲突)
ssh-copy-id -i key.pub  目标主机    发送公钥给目标主机 
ansible all -m ping               批量检测所有主机能否ssh(会生成缓存文件在~/.ansible/)

ansible动态主机机制
ansible all -m ping               批量检测所有主机能否ssh(会生成缓存文件在~/.ansible/)
检测时会读取当前目录有没有配置文件,如果有,则优先读取当前目录的配置,如果没有,则读配置文件/etc/ansible/hosts
vim /ooxx/ansible.cfg     在任意目录新建配置文件             
[defaults]
inventory = /ooxx/hosts   定义被管理主机名集群文件路径
host_key_checking = False    ssh连接时不检查(不用输入yes)
vim /ooxx/hosts           定义调用集群
[web]                           自定义集合名
web1                            主机名
...
这时,在当前目录执行检测时,调用的配置文件以当前目录优先

ansible命令
ansible all --list[-hosts]                 列出所有被管理主机
ansible 主机集合 --list[-hosts]             列出集合主机
ansible all/主机集合 -m ping [-k]           批量检测主机能否ssh(-k需要输入密码,一般部署ssh密钥对连接)
ansible-doc -l                             列出所有模块(有1378行)
ansible-doc 模块名                          查看帮助(按q退出)
ansible all/主机集合 -m command -a '命令'    远程执行命令默认模块(命令不能启用shell,即> < | & 等不生效)
ansible all/主机集合 -m shell -a '命令'      远程执行命令模块(支持shell,不能执行交互式命令,注意变量的二次解析)
ansible all/主机集合 -m script -a '脚本'     远程执行脚本(复制脚本到远程机子上执行)
ansible all/主机集合 -m yum -a 'name=包名 state=installed/removed'      远程yum装包/卸载
ansible all/主机集合 -m service -a 'name=服务名 state=started/stopped...' 远程开启/关闭服务(enabled=yes开机自启动,sleep沉睡几秒)
ansible all/主机集合 -m copy-a 'src=本地目录/文件 dest=目标目录/文件'                远程拷贝目录
ansible all/主机集合 -m lineinfile -a 'path=目标文件 regexp="正则匹配" line="修改结果"'  远程修改文件某行
ansible all/主机集合 -m replace -a 'path=目标文件 regexp="正则匹配" replace=修改结果'  远程修改文件的匹配内容
ansible all/主机集合 -m setup                        显示可查询的信息
ansible all/主机集合 -m setup -a 'filter=所需信息'     远程获取主机信息 

ansible七种武器
第一: ansible命令,用于执行临时性工作
第二: ansible-doc是ansible的模块文档说明
第三: ansible-console是交互式工具,为习惯用shell交互式的用户提供良好的体验
第四: ansible-galaxy是从github上下载管理Roles的工具,与Python的pip类似
第五: ansible-playbook通过读取先编好的playbook文件实现批量管理,日常中使用频率最高
第六: ansible-vault用于配置文件加密和解密,例如playbook加密
第七: ansible-pull/push,默认使用push模式工作,适用于大批量机器配置,效率几乎可以无限提升

JSON
JSON时JavaScript对象表示法,它是一种基于文本独立于语言的轻量级数据交换格式,可通过JavaScript进行解析
分隔符: 单引号' 括号() 中括号[] 大括号{} 冒号: 逗号, 
语法规则: 数据在键值对中,数据由逗号分隔,大括号保存对象,中括号保存数组
如: {"key":"value"}
    {"key":["value1","value2"...]}
    {["key1","key2"]:[{"key01":"value01"},{"key02":"value02"}...]}    对象和数组可以无限嵌套
    
YAML
YAML是一个可读性高,用来表达数据序列的格式
基础语法: 缩进结构通过空格来展示,数组用"- ",键值用": ",一般缩进级由两个以上空格组成,不能用tab代替空格,#注释
例子1: "李白": "诗仙"
例子2: "诗人": 
         - "李白": "诗仙"
           "年代": "唐"
         - "杜甫": "诗圣"
           "年代": "唐"
         - ...
Jinja2
Jinja2时基于Python的模板引擎,包含变量和表达式两部分,playbook的模板使用Jinja2模块来处理
基本语法: 表达式{{}}  控制语句{%%} 注释{##} 调用变量{{varname}} 计算{{2+3}} 判断{{1 in[1,2,3]}}
例子: {% if name == ... %}
      ...
      {% elif name == '于谦' %}
        {%for metho in [抽烟,喝酒,烫头]%}
          {{do method}}
        {% endfor %}
        ...
       {% endif %}
 变量可以通过过滤器修改,过滤器与变量用管道|分割,也可用圆括号传递可选参数,与shell的管道作用一样
 例子: {{'astr'|password_hash('sha512')}}
 可在http://docs.jinkan.org/docs/jinja2/templates.html查询过滤器
 
playbook剧本
playbook是ansible用于配置,部署和管理主机的剧本,执行其中一系列tasks,可让远程主机达到预期状态
playbook语法格式: 由YAML编写,遵循YAML标准;文件开始都是---;playbook由一个或多个play组成
playbook构成: hosts: 定义要执行playbook的远程主机组
             remote_user: 定义执行playbook的用户
              vars: 定义playbook运行时需要使用的变量
             tasks: 定义要在远程主机上执行的任务列表
             handlers: 定义task执行完成后需要调用的任务
编写技巧: ansible-doc 模块名         查看模块帮助(按q退出)
        /EXAMPLES                  过滤例子,查看模块执行方法,复制粘贴
使用命令: ansible-playbook playbook.yaml  -f 5   执行playbook,-f并发进程数,默认为5,建议设置为CPU两倍
         ansible
例子:vim apache.yaml            编写playbook以yaml或yml结尾
    ---
    - hosts: all                所有主机执行
      remote_user: root         以root身份执行
      tasks:
        - yum:                  yum模块装包
            name: httpd
            state: latest
        - service:              service模块启动
            name: httpd
            state: started
        - service:
            name: httpd
            enabled: yes
        - lineinfile:           lineinfile模块修改
            path: /etc/httpd/conf/httpd.conf
            regexp: '^Listen 80'
            line: 'Listen 8080'
        - shell: echo "hello world" > /var/www/html/index.html
ansible-playbook apache.yaml  -f 5      执行playbook,-f并发进程数,默认为5,建议设置为CPU两倍
例子2:vim useradd.yaml            编写playbook添加用户并设定密码    
---
  - hosts: web
    remote_user: root
    vars:                         定义变量
      username: dc
      group: users
    tasks:
      - group:
          name: "{{group}}"
          state: present
      - user:
          name: "{{username}}"
          group: "{{group}}"
      - shell: echo "{{passwd}}"|passwd --stdin "{{username}}"
vim passwd.yaml                    用Jinja2编写变量yaml文件,执行playbook时可以传入yaml文件 -e @passwd.yaml
---
passwd:
  123
ansible-playbook useradd.yaml -e '{passwd: 123}' -e ...  执行playbook,传入密码参数123

playbook错误处理机制
ansible-playbook对错误处理.默认判断$?,如果值不为0就停止执行,可通过ignore_errors忽略错误继续执行
- shell: mkdir /var/html/www
  ignore_errors:True           忽略错误继续执行,默认为False

playbook便签
tags:给指定的任务定义一个调用便签
tasks:
  - 模块1: 
      ...
    tags: 标签名          自定义标签名,与模块同级
  - 模块2: 
ansible-playbook xxx.yaml -t 标签名 -t ...   指定标签执行playbook对应模块

playbook触发器
handlers,当关注的资源发生变化时采取的操作
用notify调用handler中的操作
tasks: 
  - 模块1: 
      ...
    notify:                定义触发检测,使用到该模块时就会执行handlers的事件
      -  事件名称           调用handlers定义的事件名称
handlers:                  与tasks同级
  - name: 事件名称          定义事件名称
    模块: ...               定义执行模块

playbook条件判断触发
---                        当cpu负载高于0.7时关闭服务
  - hosts: web
    remote_user: root
    tasks:
      - shell: uptime | awk '{printf("%.2f",$(NF-2))}'
        register: result   返回前一个命令的对象,名为result
      - service:
          name: httpd
          state: stopped
        when: result.stdout|float > 0.7  调用result值与0.7比较

playbook遍历
with_items是playbook标准循环,通过{{item}}获取每次迭代的值
例子: ---
      - hosts: web2
        remote_user: root
        tasks: 
          - group:
              name: "{{group}}"
              state: present
          - user:
              name: "{{name}}"
              group: "{{group}}"
          - shell: echo "{{passwd}}"|passwd --stdin "{{name}}"
            with_items: 
              - {name: 'nb',group: 'root',passwd: '123'}
              - {name: 'plj',group: 'mysql',passwd: '567'}
              ...
playbook封装











