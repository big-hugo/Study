Nginx安装
用源码包安装 依赖包有gcc  pcre-devel  openssl-devel
useradd -s /sbin/nologin nginx   系统新建一个非登录用户
./configure  --user=nginx  --group=nginx --with-http_ssl_module --with-http_stub_status_module 源码包检测时可添加nginx用户,默认用户为nobody,为了安全;可用--help查看可安装的模块
报什么错就装什么依赖包
/usr/local/nginx/sbin/nginx  启动程序
/usr/local/nginx/sbin/nginx  -s stop   停止服务
/usr/local/nginx/sbin/nginx  -s reload  重载配置
/usr/local/nginx/sbin/nginx -v  查看版本信息
/usr/local/nginx/sbin/nginx  -t  检查配置文件是否正确
ln -s /usr/local/nginx/sbin/nginx  /sbin   创建软连接可以快捷使用
echo "/usr/local/nginx/sbin/nginx" >> /etc/rc.local   设定开机自启的命令 
chmod +x /etc/rc.local 确保有执行权限

Nginx升级
用源码包检测,编译,不安装(为了使用原来的配置文件,只更新启动软件)
mv  /usr/local/nginx/sbin/nginx  /usr/local/nginx/sbin/nginxold  备份旧版本的启动文件
cp  objs/ngin  /usr/local/nginx/sbin/nginx   复制为新的启动文件
killall nginx &&  /usr/local/nginx/sbin/nginx  杀死原进程,再启动

配置加密网站
安装httpd-tools
htpasswd -C /usr/local/nginx/pass  用户名   创建用户,路径自定自定义,去掉-C为追加用户
vim /usr/local/nginx/conf/nginx.conf       进入配置文件
server {  
           listen 80;                     监听端口
           server_name  域名;              网站域名
           auth_basic  "xxx";              密码提示信息
           auth_basic_user_file "/usr/local/nginx/pass";     密码信息文件路径
    localtion / {                                 匹配URL以/结尾的条件(默认以/结尾)
                  root html;                      页面所在目录
                  index index.html index.htm;     匹配默认页面名,按优先级排序
    }    
        }
/usr/local/nginx/sbin/nginx  -s reload        重载配置文件


创建虚拟主机
去掉虚拟主机的注释，修改sever_name        域名
listen *:* ;          端口
charset utf-8;          支持中文
创建新的虚拟主机页面所在路径,重载配置文件生效


部署LNMP(linux,nginx,mysql,php)
除了nginx,还需要安装mariadb  mariadb-server  mariadb-devel  php  php-fpm  php-mysql
启动服务php-fpm,mariadb并设置开机自启
由于php页面需要调用文件夹,所以要在php页面文件夹给apache权限
为网站提前创建一个数据库、添加账户并设置该账户有数据库访问权限
修改php-fpm的配置/etc/php-fpm.d/www.conf
listen = 127.0.0.1:9000               PHP端口号
pm.max_children = 32                  最大进程数(每个进程约20m,看内存来分配)
pm.start_servers = 15                 最小进程数
pm.min_spare_servers = 5              最小需要空闲进程
pm.max_spare_servers = 32             最多允许空间进程
重启php-fpm服务
php页面错误日志 /var/log/php-fpm/www-error.log
修改nginx配置,实现动态页面
location ~\.php$ {                    匹配以php结尾的URL
           root html;                 网页目录
           fastcgi_pass 127.0.0.1:9000;     转发到自身9000端口
           fastcgi_index  index.php;        默认页面
           include fastcgi.conf;            加载副配置文件(改后缀名)
           }
重载nginx配置文件


Nginx实现地址重写
server{
           rewrite  旧地址  新地址   [选项];              格式
           rewrite  /a.html  /b.html redirect;         重新网页目录下的网页
           rewrite  /   http://www.tmooc.cn/ ;         重写域名
           rewrite  ^/(.*)$  http://www.tmooc.cn/$1;   重新到其他域名下相同URI
 选项: redirect地址栏显示新地址  last不再读其他rewrite  break不再读其他语句 permanent永久重定向
           }
           
           
 配置SSL安全网站
 cd usr/local/nginx/conf         进入配置文件目录
 openssl genrsa > cert.key                  生成私钥
 openssl req -new -x509 -key cert.key > cert.pem       生成证书
 进入配置文件 /usr/local/nginx/conf/nginx.conf
 去掉SSL段的注释(这里的私钥和证书名要与生成的一致)
修改域名,页面地址,重载服务


实现不同浏览器访问不同页面
server{  ...                                           写在虚拟主机里
        if ($http_user_agent  ~*  firefox) {           模糊匹配firefox浏览器
           rewrite  /(.*)  /firefox/$1;                任何URI重写到firefox目录下的相同URI
        }  
}


Nginx七层调度器(反向代理)
功能:轮询调度,健康检查
vim     /usr/local/nginx/conf/nginx.conf    配置文件
http{ ...  upstream  name {                 定义后端集群,名称可自定义    
           server 后端服务器ip:80;              添加后端服务器
           server 后端服务器2ip:80  weight=2  max_fails=1  fail_timeout=30;   权重,最大失败次数,失败后30秒后再检查
}}
server {    ...
           location / {
                           ip_hash;                         实现同一来源ip访问同一服务器            
                           proxy_pass  http:// name:        转发给集群 
           }
}
例子:调度tomcat集群
vim  /usr/local/nginx/conf/nginx.conf
http{
    upstream toms {
        server 192.168.2.100:8080;
        server 192.168.2.200:8080;
    }
    server  {
        listen 80;
        server_name localhost;
        location / {
            proxy_pass  http://toms;
        }
    }
}  



Nginx四层(TCP/UDP)调度器
nginx1.9版本后可用,可用于ssh转发
./configure  --with-stream                 检查源码包时添加--with-stream模块
vim  /usr/lcoal/nginx/conf/nginx.conf      修改配置文件
stream {    upstream name {                定义集群,名称任意(stream在http外) 
           server 后端服务器ip:端口;          添加后端服务器
           server 后端服务器ip2:端口;
 }
server {     listen *;                      监听端口
          proxy_pass  name;                 转发给集群
} 
}http{ ... }


自定义报错页面  
http{  fastcgi_intercept_errors on;         错误页面重定向
server{
error_page  404  /404.html;      自定义错误页面,提前准备404.html
401 账户密码错误    403 禁止访问    404 找不到页面   414  url头部过长     502  bad gateway


Nginx查看状态信息
./configure  --with-http_sub_status_module   检查时添加状态模块
server { ... location /status {              匹配url的结尾为status
              stub_status on;                开启状态页面
              allow    ip;                  允许访问ip
              deny    all;                   不允许全部人访问
}}
状态页面信息
Active connections: 1                       当前连接数量
server accepts handled requests             
 1 1 1                                      已接受总数量  已处理总数量   客户端发送请求数量
Reading: 0 Writing: 1 Waiting: 0            正在读取数量  正在响应数量   正在等待响应数量

Nginx并发量优化
ab -c 并发数 -n 总请求数 URL                  并发量压力测试
vim  /usr/lcoal/nginx/conf/nginx.conf      修改配置文件
worker_processes;                          与CPU核心数一致
events{  worker_connections 65535; }       每个worker最大并发连接数
ulimt  -a                                  查看内核所有属性值
ulimit -Hn/-Sn   限制值                     临时设置硬/软限制
vim /etc/security/limits.conf              永久设置软/硬限制
*   soft/hart  nofile  限制值               用户或组 软/硬 项目 限制值

优化Nginx数据包头缓存(优化414错误)
vim  /usr/lcoal/nginx/conf/nginx.conf      修改配置文件
http{ client_header_buffer_size 1K;        默认包头信息缓存
      large_client_header_buffers 4 4K;}   最大缓存个数和容量  
      
优化Nginx静态页面缓存时间
vim  /usr/lcoal/nginx/conf/nginx.conf      修改配置文件
server{... 
      localtion ~* \.(jpg|gif|png|xml)${   匹配URL结尾 
       expires     30d;         }          定义客户端缓存时间30天
}
在firefox浏览器输入about:cache可查看缓存信息

Nginx日志切割
#!/bin/bash
date=`date+%Y%m%d`                          定义变量为当前时间
logpath=/usr/local/nginx/logs               定义日志路径
mv $logpath/access.log $logpath/access.$date.log      重任名访问日志
mv $logpath/error.log $logpath/error.$date.log        重任名错误日志
kill -USR1 $(cat $logpath/nginx.pid)        生产新的日志文件










