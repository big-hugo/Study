版本控制软件(常用于开发代码更新)
集中式SVN(subversion)版本集中在服务器,断网无法使用
分布式,每个客户端都有完整版本(git)

服务器配置(ssh版)
yum安装git
新建一个目录 /var/git  
新建空仓库git init /var/git/project --bare
初始化空的 Git 版本库于 /var/git/project/.git/

服务端配置(git版)
安装git-daemon  git 
新建空仓库git init /var/git/XX --bare
配置文件/usr/lib/systemd/system/git@.service
--base-path=git仓库目录  修改配置文件中仓库目录
systemctl start git.socket  起服务

服务端配置(web版)
安装gitweb  httpd  git
vim +11 /etc/gitweb.conf 直接跳到11行
$project="仓库目录";
重启httpd  客户端可用firefox 服务器ip/git 访问

客户端克隆git仓库,作为工作目录,仅第一次使用
ssh-keygen -f /root/.ssh/id_rsa -N ''  非交互生成秘钥(git通用)
ssh-copy-id  服务器ip        发送秘钥到服务器,实现免密登录
git  clone  *@服务器IP:仓库目录  克隆服务器上的仓库,作为工作目录(基于ssh)
git clone git://服务器ip/服务器git仓库   克隆git仓库(基于git)


客户端:
git  colne  *@IP:仓库目录  克隆服务器上的仓库,作为工作目录,仅第一次使用
git status 查看工作区状态
git add . 将工作区提交到暂存区
git commit -m "注释"   将暂存区提交到本地仓库.git
git config --global user.email "you@example.com" 添加邮箱信息
git config --global user.name "Your Name"添加名字 在家目录生成~/.gitconfig
git config --global push.default simple 第一次上传需要输入
git push 上传到服务器仓库
git pull 更新本地仓库,与服务器同步
git log   查看版本日志
git log --oneline   以行为单位查看版本日志
git reflog   查看历史版本日志
git reset --hard 版本号   移动到选择的版本


MASTER分支（MASTER是主分支，是代码的核心）。
DEVELOP分支（DEVELOP最新开发成果的分支）。
RELEASE分支（为发布新产品设置的分支）。
HOTFIX分支（为了修复软件BUG缺陷的分支）。
FEATURE分支（为开发新功能设置的分支）。
git branch  分支名   创建分支
git branch -v 查看所在分支
git checkout 分支名  切换分支
git merge 修改后分支名  合并分支(合并后会覆盖当前分支)
