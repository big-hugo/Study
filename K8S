# 什么是k8s
- **Kubernetes**的名字来自希腊语，意思是“舵手” 或 “领航员”。K8s是将8个字母“ubernete”替换为“8”的缩写。
- K8S的创造者，是众人皆知的行业巨头——**Google**。
- 然而K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。
- K8S是2014年6月由Google公司正式公布出来并宣布开源的。
# 为什么要使用k8s
- 就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理，就在这个时候，K8S出现了
- Kubernetes是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本。
- K8s 是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能
# 什么时候用
- 快速部署应用
- 快速扩展应用
- 无缝对接新的应用功能
- 节省资源，优化硬件资源的使用
# 在那用
- **可移植**: 支持公有云，私有云，混合云，多重云（multi-cloud）
- **可扩展**: 模块化, 插件化, 可挂载, 可组合
- **自动化**: 自动部署，自动重启，自动复制，自动伸缩/扩展
# 怎么用
- **Build, Ship and Run （创建，发送和运行）**
- **Build once，Run anywhere（搭建一次，到处能用）**
- Docker技术的三大核心概念，分别是：
1. 镜像（Image）
2. 容器（Container）
3. 仓库（Repository）
## k8s 架构
一个K8S系统，通常称为一个**K8S集群（Cluster）**
这个集群主要包括两个部分：
- **一个Master节点（主节点）**
- Master节点包括API Server、Scheduler、Controller manager、etcd。
  ​    API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。
  ​    Scheduler负责对集群内部的资源进行调度，相当于“调度室”。
  ​    Controller manager负责管理控制器，相当于“大总管”。
- **一群Node节点（计算节点）**
- Node节点包括**Docker、kubelet、kube-proxy、Fluentd、kube-dns**（可选），还有就是**Pod**。
  ​    **Pod**是Kubernetes最基本的操作单元。
  ​    一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。
  ​    除了Pod之外，K8S还有一个**Service**，一个Service可以看作一组提供相同服务的Pod的对外访问接口
  ​    Docker，不用说了，创建容器的。
  ​    Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。
  ​    Kube-proxy，主要负责为Pod对象提供代理。
  ​    Fluentd，主要负责日志收集、存储与查询。

master端
yum -y install etcd kubernetes-master.x86_64  kubernetes-client.x86_64      安装软件
vim /etc/etcd/etcd.conf       修改配置文件
6 ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"       监听所有端口的2379
21 ETCD_ADVERTISE_CLIENT_URLS="http://192.168.1.10:2379"    自身IP地址
vim /etc/kubernetes/config    修改配置文件
22 KUBE_MASTER="--master=http://192.168.1.10:8080"    自身IP地址
vim /etc/kubernetes/apiserver
8: KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0"
17: KUBE_ETCD_SERVERS="--etcd-servers=http://192.168.1.10:2379"   自身IP地址
23: 删除 ServiceAccount 参数
systemctl start(enable) kube-apiserver  kube-controller-manager   kube-scheduler  etcd  启动和开机自启服务
kubectl get cs                  验证master状态
kubectl get csr                 验证集群状态
kubectl get node                验证节点状态

node端
yum -y install kubernetes-node docker                 安装软件
vim /etc/kubernetes/config      修改配置文件
22 KUBE_MASTER="--master=http://192.168.1.10:8080"  master主机IP
vim /etc/sysconfig/docker       修改配置文件
4: 添加参数 --insecure-registry=192.168.1.100:5000 --add-registry 192.168.1.100:5000   docker仓库地址
vim /etc/kubernetes/kubelet     修改配置文件
5: KUBELET_ADDRESS="--address=0.0.0.0"
11: KUBELET_HOSTNAME="--hostname-override=本机名称"
14: 添加 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --pod-infra-container-image=pod-infrastructure:latest
vim /etc/kubernetes/kubelet.kubeconfig                手动编写配置文件
apiVersion: v1
kind: Config
clusters:
  - cluster:
      server: http://192.168.1.100:8080               Master的IP，即自身IP
    name: local
contexts:
  - context:
      cluster: local
    name: local
current-context: local
systemctl start(enable) kubelet kube-proxy docker      启动服务和开机自启

网络-实现容器直接互通
master:
vim   /etc/etcd/etcd.conf
ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
etcdctl mk /atomic.io/network/config '{"Network": "10.254.0.0/16", "Backend": {"Type": "vxlan"}}'   执行命令
所有主机:
yum -y install flannel
vim  /etc/sysconfig/flanneld
FLANNEL_ETCD_ENDPOINTS="http://master的IP:2379" 
systemctl restart flanneld docker       注意服务顺序
创建容器，测试
vim   baseos.yaml                      编写配置文件
---
apiVersion: extensions/v1beta1         #当前格式的版本
kind: Deployment                       #当前创建资源的类型， 当前类型是Deployment
metadata:                              #当前资源的元数据
  name: test-os                        #当前资源的名字 是元数据必须的项
spec:                                  #是当前Deployment的规格说明
  replicas: 1                          #指当前创建的副本数量 默认不填 默认值就为‘1’
  template:                            #定义pod的模板
    metadata:                          #当前pod的元数据
      labels:                          #至少顶一个labels标签，可任意创建一个 key:value
        app: test_os
    spec:                              #当前pod的规格说明
      containers:                      #容器
      - name: centos                   #是容器的名字容器名字是必须填写的
        image: centos:7.5.1804         #镜像 镜像的名字和版本
        stdin: true
        tty: true
kubectl create -f baseos.yaml         创建容器
vim  kube-dashboard.yaml                编写配置文件
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard
        image: 192.168.1.100:5000/kubernetes-dashboard-amd64:v1.8.3     改为镜像仓库的IP
        ports:
        - containerPort: 9090
          protocol: TCP
        args:
          - --apiserver-host=http://192.168.1.10:8080          ###修改为Master的IP
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
kubectl create -f kube-dashboard.yaml
  测试
     kubectl get pod -o wide
     kubectl exec -it test-os-3826630470-jc5j4 -- /bin/bash
  









