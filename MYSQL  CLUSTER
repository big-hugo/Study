mysql主从同步,主更新会在从上更新,从更新与主无关
原理master启用binlog日志;
slave_IO复制master的binlog日志到本机的relay-log文件,slave_SQL执行relay-log里面的语句确保和主机一样
/var/lib/mysql/master.info记录主机配置信息  /var/lib/mysql/relay-log.info记录本机配置信息
cd /var/lib/mysql/              进入配置文件目录
rm -rf master.info  relay-log.info  *relay-bin*   清除主从配置文件
主服务器配置:
vim /etc/my.cnf                      修改配置文件
log-bin=日志文件名                     定义binlog日志文件
server_id=服务器id号                   定义服务器id号
grant replication slave on *.* to slave@'%' identified by '123456';     授权从属用户
show master status;                  查看日志状态
mysqldump -uroot -p123456 --master-data 库 > /root/xx.sql     导出数据库文件   master-data记录日志名称和偏移量
scp /root/xx.sql root@192.168.4.52:/                          发送数据库文件给从服务器
从服务器配置:
vim /etc/my.cnf                       修改配置
server_id=服务器id号                    定义服务器id号,与主服务器不同
mysql -uroot -p123456  库  <  /xx.sql   导入数据库文件
vim /xx.sql                         查看日志文件名和偏移量
change master to master_host='192.168.4.51',        输入主库信息
    -> master_user='slave',
    -> master_passowrd='123456',
    -> master_log_file='日志名',
    -> master_log_pos=偏移量;
start slave;                          开启进程
show slave status;                    查看状态(里面有排错信息)

主从服务器结构
一主多从结构:从--->主<----从
主从从结构:主<--从<--从      中间机子配置文件加入log_slave_updates   允许级联复制
主主结构:主<----->主

复制模式介绍
异步复制(默认 ):主库执行完一次事务后,立即返回给客户端,不管从库是否接受并处理
全同步复制:主库执行玩一次事务,并且所有从库执行了该事务,才返回结果给客户端
半同步复制:主库执行完一次事务后,等待至少一个从库收到并写到relay log中才返回给客户端
show  variables like 'have_dynamic_loading';        查看是否允许加载动态模块(默认允许)
install plugin  rpl_semi_sync_master  SONAME  ”semisync_master.so”;    加载master模块,在主库上执行
install plugin  rpl_semi_sync_master  SONAME  ”semisync_slave.so”;    加载slave模块,在从库上执行
select plugin_name, plugin_status from information_schema.plugins where  plugin_name like '%semi%';  查看模块是否安装成功
set  global rpl_semi_sync_master_enabled = 1;   启用 master 半同步复制,在主库执行,默认关闭
set  global rpl_semi_sync_slave_enabled = 1;    启用 slave 半同步复制,在从库执行,默认关闭
show variables like "rpl_semi_sync_%_enabled";  查看半同步模式模块是否启用
修改配置文件,永久启用半同步复制
vim /etc/my.cnf
plugin-load="rpl_semi_sync_master=semisync_master.so"      加载master模块,在主库上配置
plugin-load="rpl_semi_sync_slave=semisync_slave.so"        加载slave模块,在从库上配置
rpl-semi-sync-master-enabled = 1           启用 master 半同步复制,在主库配置
rpl-semi-sync-slave-enabled = 1            启用 slave 半同步复制,在从库配置


mysql读写分离软件(中间件),在主库写入,在从库读取
mycat,mysqlproxy,maxscale都免费
部署maxscale服务
安装maxscale.rpm包
vim /etc/maxscale.cnf       修改配置文件
threads=auto                定义线程个数
[server1]                   后端服务主机(复制这一段可新建一个后端主机)
type=server
address=192.168.4.51        后端主机ip地址
port=3306                   端口
protocol=MySQLBackend       
[MySQL Monitor]             监视段
type=monitor
module=mysqlmon
servers=server1,server2     要监视的主机
user=maxscalemon            监视用户
passwd=123456               密码
monitor_interval=10000
#[Read-Only Service]        注释这一段,不定义只读服务
[Read-Write Service]
type=service
router=readwritesplit       调用模块
servers=server1,server2     
user=maxscaleroute          路由用户(客户端访问调度器时,调度器用于访问后端服务器的用户)
passwd=123456
max_slave_connections=100%
#[Read-Only Listener]       注释这一段,不监听只读服务
[Read-Write Listener]       这段监听读写可以修改端口
[MaxAdmin Listener]         这段监听管理可以定义端口
maxscale -f /etc/maxscale.cnf    启动程序(先配置后端主服务器)
killall  -9  maxscale            停止进程
maxadmin -uadmin -pmariadb -P4007   连接到监控信息,-P管理段的端口
list servers                        查看后台服务器状态
配置后端主服务器
grant replication slave,replication client on *.* to maxscalemon@'%' identified by '123456';   授权监视用户
grant select on mysql.* to maxscaleroute@'%' identified by '123456';            授权路由用户
客户端测试连接
mysql -h调度器ip -P监听读写端口 -u主库的授权用户 -p密码   ip为调度器ip,端口为监听读写的端口,用户是主库上的用户


多实例数据库
一台物理主机上允许多个数据库服务,节约运维成本,提高硬件利用率
解压mysql-5.7.20-linux-glibc包,yum安装libaio依赖包
mv mysql-5.7.20-linux-glibc2.12-x86_64/ /usr/local/mysql  把解压出的目录移动到软件目录下
重新配置/etc/my.cnf
[mysqld_multi]                                           启动多实例服务
mysqld=/usr/local/mysql/bin/mysqld_safe                   指定进程文件路径
mysqldamin=/usr/local/mysql/bin/mysqladmin               指定管理命令路径
user=root                                                指定进程用户
[mysqld1]                     定义数据库1(可定义多个)
datadir=/dir1                 数据库目录需要手动创建
port=3307                     数据库端口
log-error=/dir1/mysql1.log    错误日志位置
pid-file=/dir1/mysql1.pid     进程pid号文件位置
socket=/dir1/mysql1.sock      指定sock文件的路径和名称,用于传输数据
[mysqld2]
datadir=/dir2
port=3308
log-error=/dir2/mysql2.log
pid-file=/dir2/mysql2.pid
socket=/dir2/mysql2.sock
PATH=/usr/local/mysql/bin:$PATH    把命令路径加到path变量(临时)
echo 'export  PATH=/usr/local/mysql/bin:$PATH' >> /etc/profile   把命令路径加到path变量(永久)
useradd mysql           新建mysql用户
/usr/local/mysql/bin/mysqld_multi  start 1           启动mysqld1数据库,1是实例编号
/usr/local/mysql/bin/mysqld_multi  --user=root  --password=密码 stop 实例编号  停止服务
/usr/local/mysql/bin/mysql  -uroot -p初始密码  -S sock文件绝对路径   本机连接数据库
mysql -hip地址 -P端口 -u用户 -p密码           客户端访问实例数据库






